"""
Замечания и предложения:
Операция может содержать дополнительные поля, такие как комментарий итд. Логика верификации этих полей определяется
автором реализации.
В данной имплементации отсутствует проверка уникальности операции, только уникальность транзакции. Однако учтите что в
таком случае злоумышленник может создать новую транзакцию, в которую добавить данную операцию и потратить монеты с
чужого аккаунта. Постарайтесь избежать данной уязвимости в вашей реализации.
В случае если к конкретному аккаунту привязан кошелек с  большим количеством ключей - не забудьте проверить все на
соответствие подписи.

"""
from copy import deepcopy
from dataclasses import dataclass, field
from typing import Optional, Union, List

from blockchain.account import Account
from signature_algorithms.ring_signature import RingSignature


@dataclass
class Operation:
    # account of the sender of the payment.
    sender: Optional[Account] = field(default=None)
    # payment recipient's account.
    receiver: Optional[Account] = field(default=None)
    # transfer amount.
    amount: Optional[int] = field(default=0)
    # Signature data, generated by the sender of the payment.
    signature: Optional[Union[int, List[int]]] = field(default=None)

    @staticmethod
    def create_operation(sender: Account, receiver: Account, amount: int, signature: Union[int, List[int]]) \
            -> "Operation":
        """
        The function allows to create a transaction with all the necessary details and signature.
        It takes as input the accounts of the sender and the recipient of the funds, the transfer amount
        and the signature data mentioned.

        :return: Operation object.
        """
        return deepcopy(Operation(sender, receiver, amount, signature))

    def verify_operation(self, public_keys: list) -> bool:
        """
        The function which performs the verification of the operation. The main checks (relevant for proposed
        implementation) are: checking the transfer amount (that it does not exceed the sender's balance) and
        checking the signature (using the sender's public key).

        :return: true/false depending on the results of the transaction validation.
        """
        if self.sender.balance < self.amount:
            return False

        if RingSignature().verify("Dummy!", public_keys, *self.signature):
            return True

        return False
