"""
Замечания и предложения:
Операция может содержать дополнительные поля, такие как комментарий итд. Логика верификации этих полей определяется
автором реализации.
В данной имплементации отсутствует проверка уникальности операции, только уникальность транзакции. Однако учтите что в
таком случае злоумышленник может создать новую транзакцию, в которую добавить данную операцию и потратить монеты с
чужого аккаунта. Постарайтесь избежать данной уязвимости в вашей реализации.
В случае если к конкретному аккаунту привязан кошелек с  большим количеством ключей - не забудьте проверить все на
соответствие подписи.

"""
from copy import deepcopy
from dataclasses import dataclass, field
from typing import Optional, Tuple

from blockchain.account import Account
from features.utils import get_transaction_message as tx_msg
from signature_algorithms.ecdsa_signature import ECDSA


@dataclass
class Operation:
    # account of the sender of the payment.
    sender: Optional[Account] = field(default=None)
    # payment recipient's account.
    receiver: Optional[Account] = field(default=None)
    # transfer amount.
    amount: Optional[int] = field(default=0)
    # Signature data, generated by the sender of the payment.
    signature: Optional[Tuple[int, int]] = field(default=None)

    def __initialize_fields(self, sender: Account, receiver: Account, amount: int, signature: Tuple[int, int]) -> None:
        self.sender = sender
        self.receiver = receiver
        self.amount = amount
        self.signature = signature

    def create_operation(self,
                         sender: Account,
                         receiver: Account,
                         amount: int,
                         signature: Tuple[int, int]) -> Tuple[Optional["Operation"], bool]:
        """
        The function allows to create a transaction with all the necessary details and signature.
        It takes as input the accounts of the sender and the recipient of the funds, the transfer amount
        and the signature data mentioned.

        :return: Operation object.
        """
        self.__initialize_fields(sender, receiver, amount, signature)

        if self.__verify_operation():
            return deepcopy(Operation(sender, receiver, amount, signature)), True
        else:
            return None, False

    def __verify_operation(self) -> bool:
        """
        The function which performs the verification of the operation. The main checks (relevant for proposed
        implementation) are: checking the transfer amount (that it does not exceed the sender's balance) and
        checking the signature (using the sender's public key).

        :return: true/false depending on the results of the transaction validation.
        """
        if self.signature is None or self.sender.__balance < self.amount:
            return False

        for pair in self.sender.wallet:
            if ECDSA().verify(pair.public_key, tx_msg(self.sender, self.receiver, self.amount), *self.signature):
                return True

        return False
