"""
Замечания и предложения:
Операция может содержать дополнительные поля, такие как комментарий итд. Логика верификации этих полей определяется
автором реализации.
В данной имплементации отсутствует проверка уникальности операции, только уникальность транзакции. Однако учтите что в
таком случае злоумышленник может создать новую транзакцию, в которую добавить данную операцию и потратить монеты с
чужого аккаунта. Постарайтесь избежать данной уязвимости в вашей реализации.
В случае если к конкретному аккаунту привязан кошелек с большим количеством ключей - не забудьте проверить все на
соответствие подписи.

"""
from copy import deepcopy
from dataclasses import dataclass, field
from typing import Optional, Tuple

from blockchain.account import Account
from features.utils import get_transaction_message as tx_msg
from signature_algorithms.ecdsa_signature import ECDSA
from signature_algorithms.key_pair import KeyPair


@dataclass
class Operation:
    # account of the sender of the payment.
    sender: Optional[Account] = field(default=None)
    # payment recipient's account.
    receiver: Optional[Account] = field(default=None)
    # transfer amount.
    amount: Optional[int] = field(default=0)
    # Signature data, generated by the sender of the payment.
    signature: Optional[Tuple[int, int]] = field(default=None)

    def __initialize_fields(self,
                            sender: Account,
                            receiver: Account,
                            amount: int,
                            signature: Tuple[int, int]) -> None:
        self.sender = sender
        self.receiver = receiver
        self.amount = amount
        self.signature = signature

    def __create_operation(self,
                           sender: Account,
                           receiver: Account,
                           amount: int,
                           signature: Tuple[int, int]) -> Tuple[Optional["Operation"], bool]:
        """
        The function allows to create a transaction with all the necessary details and signature.
        It takes as input the accounts of the sender and the recipient of the funds, the transfer amount
        and the signature data mentioned.

        :return: Operation object.
        """
        self.__initialize_fields(sender, receiver, amount, signature)

        if self.verify_operation():
            return deepcopy(self), True
        else:
            return None, False

    def verify_operation(self) -> bool:
        """
        The function which performs the verification of the operation. The main checks (relevant for proposed
        implementation) are: checking the transfer amount (that it does not exceed the sender's balance) and
        checking the signature (using the sender's public key).

        :return: true/false depending on the results of the transaction validation.
        """
        if self.signature is None or \
                self.sender is None or \
                self.receiver is None or \
                self.sender.get_balance < self.amount:
            return False

        for pair in self.sender.wallet:
            if ECDSA().verify(pair.public_key, tx_msg(self.sender.account_id,
                                                      self.receiver.account_id,
                                                      self.amount), *self.signature):
                return True

        return False

    def create_coinbase_op(self, receiver: Account, amount: int) -> Optional["Operation"]:
        sig, correct_sig = receiver.sign_data(receiver.wallet[0].private_key,
                                              tx_msg(receiver.account_id, receiver.account_id, amount))

        self.__initialize_fields(receiver, receiver, amount, sig)

        if correct_sig is True:
            return deepcopy(self)

        return None

    def create_payment_operation(self,
                                 sender: Account,
                                 other_account: Account,
                                 amount: int,
                                 keys: KeyPair) -> Tuple[Optional["Operation"], bool]:
        """
        A function that allows to create a payment transaction on behalf of this account for the recipient.
        It accepts the account object to which the payment will be made, the amount of the
        transfer and the wallet's key index.
        :return: true if everything is fine and Operation itself
        """
        if keys not in sender.wallet:
            return None, False

        if amount <= 0 or amount > sender.get_balance:
            return None, False

        signature, correct = sender.sign_data(keys.private_key,
                                              tx_msg(sender.account_id, other_account.account_id, amount))
        if correct is False:
            return None, False

        op, correct = self.__create_operation(sender, other_account, amount, signature)
        if correct is True:
            sender.update_balance(-1 * amount)
            return op, True
        else:
            return None, False
